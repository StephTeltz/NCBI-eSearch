<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" id="sixapart-standard">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="generator" content="Movable Type Pro 5.13-en" />
<link rel="stylesheet" href="http://www.perl.com/pub/styles.css" type="text/css" />
<link rel="start" href="http://www.perl.com/pub/" title="Home" />
<link rel="alternate" type="application/atom+xml" title="Recent Entries" href="http://www.perl.com/pub/atom.xml" />
<script type="text/javascript" src="http://www.perl.com/pub/mt.js"></script>
<!--
<rdf:RDF xmlns="http://web.resource.org/cc/"
         xmlns:dc="http://purl.org/dc/elements/1.1/"
         xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
<Work rdf:about="http://www.perl.com/pub/2002/08/20/perlandlwp.html">
<dc:title>Web Basics with LWP</dc:title>
<dc:description><![CDATA[ Sean M. Burke is the author of Perl&nbsp;&amp;&nbsp;LWP Introduction LWP (short for "Library for WWW in Perl") is a popular group of Perl modules for accessing data on the Web. Like most Perl module-distributions, each of LWP's component modules...]]></dc:description>
<dc:creator>Sean M. Burke</dc:creator>
<dc:date>2002-08-20T00:00:00-08:00</dc:date>
<license rdf:resource="http://creativecommons.org/licenses/by-nc-nd/3.0/" />
</Work>
<License rdf:about="http://creativecommons.org/licenses/by-nc-nd/3.0/">
</License>
</rdf:RDF>
-->

<script type="text/javascript">

 var _gaq = _gaq || [];
 _gaq.push(['_setAccount', 'UA-50555-22']);
 _gaq.push(['_trackPageview']);

 (function() {
   var ga = document.createElement('script'); ga.type =
   'text/javascript'; ga.async = true;
   ga.src = ('https:' == document.location.protocol ? 'https://ssl' :
   'http://www') + '.google-analytics.com/ga.js';
   var s = document.getElementsByTagName('script')[0];
   s.parentNode.insertBefore(ga, s);
 })();

</script>
<script type='text/javascript' src='http://partner.googleadservices.com/gampad/google_service.js'></script>
<script type='text/javascript'>
GS_googleAddAdSenseService("ca-pub-4136420132070439");
GS_googleEnableAllServices();
</script>
<script type='text/javascript'>
GA_googleAddSlot("ca-pub-4136420132070439", "Perl_728x90");
</script>
<script type='text/javascript'>GA_googleFetchAds();</script>
    
    <link rel="prev bookmark" href="http://www.perl.com/pub/2002/08/p6pdigest/20020818.html" title="This week on Perl 6 (week ending 2002-08-18)" />
    <link rel="next bookmark" href="http://www.perl.com/pub/2002/08/22/exegesis5.html" title="Exegesis 5" />
    
    
    <title>Web Basics with LWP - Perl.com</title>
</head>
<body id="perl-com" class="mt-entry-archive layout-wt">
    <div id="container">
        <div id="container-inner">


            <div id="header">
    <div id="header-inner">
        <div id="header-content">
        <span id="top_advert"> 
<!-- Put any landscape advert in here -->
<!-- Perl_728x90 -->
<script type='text/javascript'>
GA_googleFillSlot("Perl_728x90");
</script>
        </span> 



            <div id="header-name"><a href="http://www.perl.com/pub/" accesskey="1">Perl.com</a></div>
            <div id="header-description">news and views of the Perl programming language</div>




        </div>
    </div>
</div>



            <div id="content">
                <div id="content-inner">


                    <div id="alpha">
                        <div id="alpha-inner">


                            <div id="entry-1342" class="entry-asset asset hentry">
                                <div class="asset-header">
                                    <h1 id="page-title" class="asset-name entry-title">Web Basics with LWP</h1>
                                    <div class="asset-meta">
                                        <span class="byline">

                                            By <span class="vcard author">Sean M. Burke</span> on <abbr class="published" title="2002-08-20T00:00:00-08:00">August 20, 2002 12:00 AM</abbr>

                                        </span>


                                    </div>
                                </div>
                                <div class="asset-content entry-content">

                                    <div class="asset-body">
                                        <!-- sidebar begins --><!-- don't move sidebars --><!-- sidebar ends --><p><em>Sean M. Burke is the author of <a href="http://www.oreilly.com/catalog/perllwp/">Perl&nbsp;&amp;&nbsp;LWP</a></em></p><h2>Introduction</h2><p>LWP (short for "Library for WWW in Perl") is a popular group of Perl modules for accessing data on the Web. Like most Perl module-distributions, each of LWP's component modules comes with documentation that is a complete reference to its interface. However, there are so many modules in LWP that it's hard to know where to look for information on doing even the simplest things.</p><p>Introducing you to using LWP would require a whole book--a book that just happens to exist, called <a href="http://www.oreilly.com/catalog/perllwp/"><i>Perl&nbsp;&amp;&nbsp;LWP</i></a>. This article offers a sampling of recipes that let you perform common tasks with LWP.</p><h3>Getting Documents with LWP::Simple</h3><p>If you just want to access what's at a particular URL, the simplest wayto do it is to use <code>LWP::Simple</code>'s functions.</p><p>In a Perl program, you can call its <code>get($url)</code> function. It will trygetting that URL's content. If it works, then it'll return the content; but if there's some error, it'll return <code>undef</code>.</p><pre><code>  my $url = 'http://freshair.npr.org/dayFA.cfm?todayDate=current';    # Just an example: the URL for the most recent /Fresh Air/ show  use LWP::Simple;  my $content = get $url;  die "Couldn't get $url" unless defined $content;  # Then go do things with $content, like this:  if($content =~ m/jazz/i) {    print "They're talking about jazz today on Fresh Air!\n";  } else {    print "Fresh Air is apparently jazzless today.\n";  }</code></pre><p>The handiest variant on <code>get</code> is <code>getprint</code>, which is useful in Perl one-liners.  If it can get the page whose URL you provide, it sends itto <code>STDOUT</code>; otherwise it complains to <code>STDERR</code>.</p><pre><code>  % perl -MLWP::Simple -e "getprint 'http://cpan.org/RECENT'"</code></pre><p>This is the URL of a plain-text file. It lists new files in CPAN inthe past two weeks.  You can easily make it part of a tidy littleshell command, like this one that mails you the list of new<code>Acme::</code> modules:</p><pre><code>  % perl -MLWP::Simple -e "getprint 'http://cpan.org/RECENT'"  \     | grep "/by-module/Acme" | mail -s "New Acme modules! Joy!" $USER</code></pre><p>There are other useful functions in <code>LWP::Simple</code>, including one function for running a <code>HEAD</code> request on a URL (useful for checking links, or getting the last-revised time of a URL), and two functions forsaving and mirroring a URL to a local file. See the <a href="http://search.cpan.org/author/GAAS/libwww-perl/lib/LWP/Simple.pm">LWP::Simpledocumentation</a> for the full details, or Chapter 2, "Web Basics" of <i>Perl&nbsp;&amp;&nbsp;LWP</i> for more examples.</p><h3>The Basics of the LWP Class Model</h3><p><code>LWP::Simple</code>'s functions are handy for simple cases, but its functionsdon't support cookies or authorization; they don't support setting headerlines in the HTTP request; and generally, they don't support reading header linesin the HTTP response (most notably the full HTTP error message, in case of anerror). To get at all those features, you'll have to use the full LWPclass model.</p><p>While LWP consists of dozens of classes, the two that you have to understand are <code>LWP::UserAgent</code> and <code>HTTP::Response</code>. <code>LWP::UserAgent</code> is a class for "virtual browsers," which you use for performing requests, and <code>HTTP::Response</code> is a class for the responses (or error messages) that you get back from those requests.</p><p>The basic idiom is <code>$response = $browser->get($url)</code>, or fullyillustrated:</p><pre><code>  # Early in your program:    use LWP 5.64; # Loads all important LWP classes, and makes                #  sure your version is reasonably recent.  my $browser = LWP::UserAgent->new;    ...    # Then later, whenever you need to make a get request:  my $url = 'http://freshair.npr.org/dayFA.cfm?todayDate=current';    my $response = $browser->get( $url );  die "Can't get $url -- ", $response->status_line   unless $response->is_success;  die "Hey, I was expecting HTML, not ", $response->content_type   unless $response->content_type eq 'text/html';     # or whatever content-type you're equipped to deal with  # Otherwise, process the content somehow:    if($response->content =~ m/jazz/i) {    print "They're talking about jazz today on Fresh Air!\n";  } else {    print "Fresh Air is apparently jazzless today.\n";  }</code></pre>There are two objects involved: <code>$browser</code>, which holds an object of the class <code>LWP::UserAgent</code>, and then the <code>$response</code> object, which is of the class <code>HTTP::Response</code>. You really need only one browser object per program; but every time you make a request, you get back a new <code>HTTP::Response</code> object, which will have some interesting attributes:<ul><li><p>A status code indicating success or failure (which you can test with <code>$response->is_success</code>).</p></li><li><p>An HTTP status line, which I hope is informative if there is a failure (which you can see with <code>$response->status_line</code>, and which returns something like "404 Not Found").</p></li><li><p>A MIME content-type like "text/html", "image/gif", "application/xml", and so on, which you can see with <code>$response->content_type</code></p></li><li><p>The actual content of the response, in <code>$response->content</code>. If the response is HTML, that's where the HTML source will be; if it's a GIF, then <code>$response->content</code> will be the binary GIF data.</p></li><li><p>And dozens of other convenient and more specific methods that are documented in the docs for <code>HTTP::Response</code>, and its superclasses,<code>HTTP::Message</code> and <code>HTTP::Headers</code>.</p></li></ul><h3>Adding Other HTTP Request Headers</h3><p>The most commonly used syntax for requests is <code>$response = $browser->get($url)</code>, but in truth, you can add extra HTTP headerlines to the request by adding a list of key-value pairs after the URL, like so:</p><pre><code>  $response = $browser->get( $url, $key1, $value1, $key2, $value2, ... );</code></pre><p>For example, here's how to send more Netscape-like headers, in caseyou're dealing with a site that would otherwise reject your request:</p><pre><code>  my @ns_headers = (   'User-Agent' => 'Mozilla/4.76 [en] (Win98; U)',   'Accept' => 'image/gif, image/x-xbitmap, image/jpeg,         image/pjpeg, image/png, */*',   'Accept-Charset' => 'iso-8859-1,*,utf-8',   'Accept-Language' => 'en-US',  );  ...    $response = $browser->get($url, @ns_headers);</code></pre><p>If you weren't reusing that array, you could just go ahead and do this: </p><pre><code>  $response = $browser->get($url,   'User-Agent' => 'Mozilla/4.76 [en] (Win98; U)',   'Accept' => 'image/gif, image/x-xbitmap, image/jpeg,         image/pjpeg, image/png, */*',   'Accept-Charset' => 'iso-8859-1,*,utf-8',   'Accept-Language' => 'en-US',  );</code></pre><p>If you were only going to change the 'User-Agent' line, you could just changethe <code>$browser</code> object's default line from "libwww-perl/5.65" (or the like)to whatever you like, using <code>LWP::UserAgent</code>'s <code>agent</code> method:</p><pre><code>   $browser->agent('Mozilla/4.76 [en] (Win98; U)');</code></pre><h3>Enabling Cookies</h3><p>A default <code>LWP::UserAgent</code> object acts like a browser with its cookiessupport turned off. There are various ways of turning it on, by settingits <code>cookie_jar</code> attribute. A "cookie jar" is an object representinga little database of all the HTTP cookies that a browser can know about. It can correspond to a file on disk (the way Netscape uses its <i>cookies.txt</i> file), or it can be just an in-memory object that starts out empty, and whose collection ofcookies will disappear once the program is finished running.</p><p>To give a browser an in-memory empty cookie jar, you set its <code>cookie_jar</code> attribute like so:</p><pre><code>  $browser->cookie_jar({});</code></pre><p>To give it a copy that will be read from a file on disk, and will be savedto it when the program is finished running, set the <code>cookie_jar</code> attributelike this:</p><pre><code>  use HTTP::Cookies;  $browser->cookie_jar( HTTP::Cookies->new(    'file' => '/some/where/cookies.lwp',        # where to read/write cookies    'autosave' => 1,        # save it to disk when done  ));</code></pre><p>That file will be an LWP-specific format. If you want to access the cookies in your Netscape cookies file, you can use the <code>HTTP::Cookies::Netscape</code> class:</p><pre><code>  use HTTP::Cookies;    # yes, loads HTTP::Cookies::Netscape too    $browser->cookie_jar( HTTP::Cookies::Netscape->new(    'file' => 'c:/Program Files/Netscape/Users/DIR-NAME-HERE/cookies.txt',        # where to read cookies  ));</code></pre><p>You could add an <code>'autosave' => 1</code> line as we did earlier, but attime of writing, it's uncertain whether Netscape might discard some of the cookies you could be writing back to disk.</p><h3>Posting Form Data</h3><p>Many HTML forms send data to their server using an HTTP POST request, whichyou can send with this syntax:</p><pre><code> $response = $browser->post( $url,   [     formkey1 => value1,      formkey2 => value2,      ...   ], );</code></pre>Or if you need to send HTTP headers:<pre><code> $response = $browser->post( $url,   [     formkey1 => value1,      formkey2 => value2,      ...   ],   headerkey1 => value1,    headerkey2 => value2,  );</code></pre><p>For example, the following program makes a search request to AltaVista(by sending some form data via an HTTP POST request), and extracts fromthe HTML the report of the number of matches:</p><pre><code>  use strict;  use warnings;  use LWP 5.64;  my $browser = LWP::UserAgent->new;    my $word = 'tarragon';    my $url = 'http://www.altavista.com/sites/search/web';  my $response = $browser->post( $url,    [ 'q' => $word,  # the Altavista query string      'pg' => 'q', 'avkw' => 'tgz', 'kl' => 'XX',    ]  );  die "$url error: ", $response->status_line   unless $response->is_success;  die "Weird content type at $url -- ", $response->content_type   unless $response->content_type eq 'text/html';  if( $response->content =~ m{AltaVista found ([0-9,]+) results} ) {    # The substring will be like "AltaVista found 2,345 results"    print "$word: $1\n";  } else {    print "Couldn't find the match-string in the response\n";  }</code></pre><h3>Sending GET Form Data</h3><p>Some HTML forms convey their form data not by sending the datain an HTTP POST request, but by making a normal <code>GET</code> request withthe data stuck on the end of the URL.  For example, if you went to<a href="http://imdb.com/"><em>imdb.com</em></a> and ran a search on <i>Blade Runner</i>, the URL you'd seein your browser window would be:</p><pre><code>  http://us.imdb.com/Tsearch?title=Blade%20Runner&restrict=Movies+and+TV</code></pre><p>To run the same search with LWP, you'd use this idiom, which involvesthe URI class:</p><pre><code>  use URI;  my $url = URI->new( 'http://us.imdb.com/Tsearch' );    # makes an object representing the URL    $url->query_form(  # And here the form data pairs:    'title'    => 'Blade Runner',    'restrict' => 'Movies and TV',  );    my $response = $browser->get($url);</code></pre><p>See Chapter 5, "Forms" of <i>Perl&nbsp;&amp;&nbsp;LWP</i> for a longer discussion of HTML forms and of form data, as well as Chapter 6 through Chapter 9 for a longer discussion of extracting data from HTML.</p><h3>Absolutizing URLs</h3><p>The URI class that we just mentioned above provides all sorts of methodsfor accessing and modifying parts of URLs (such as asking sort of URL itis with <code>$url->scheme</code>, and asking what host it refers to with <code>$url->host</code>, and so on, as described in <a href="http://search.cpan.org/author/GAAS/URI/URI.pm">the docs for the URI class</a>.  However, the methods of most immediate interestare the <code>query_form</code> method seen above, and now the <code>new_abs</code> method for taking a probably relative URL string (like "../foo.html") and gettingback an absolute URL (like "http://www.perl.com/stuff/foo.html"), asshown here:</p><pre><code>  use URI;  $abs = URI->new_abs($maybe_relative, $base);</code></pre><p>For example, consider this program that matches URLs in the HTMLlist of new modules in CPAN:</p><pre><code>  use strict;  use warnings;  use LWP 5.64;  my $browser = LWP::UserAgent->new;    my $url = 'http://www.cpan.org/RECENT.html';  my $response = $browser->get($url);  die "Can't get $url -- ", $response->status_line   unless $response->is_success;    my $html = $response->content;  while( $html =~ m/&lt;A HREF=\"(.*?)\"/g ) {          print "$1\n";    }</code></pre><p>When run, it emits output that starts out something like this:</p><pre><code>  MIRRORING.FROM  RECENT  RECENT.html  authors/00whois.html  authors/01mailrc.txt.gz  authors/id/A/AA/AASSAD/CHECKSUMS  ...</code></pre><p>However, if you actually want to have those be absolute URLs, youcan use the URI module's <code>new_abs</code> method, by changing the <code>while</code> loop to this:</p><pre><code>  while( $html =~ m/&lt;A HREF=\"(.*?)\"/g ) {          print URI->new_abs( $1, $response->base ) ,"\n";  }</code></pre><p>(The <code>$response->base</code> method from <code>HTTP::Message</code>is for returning the URL that should be used for resolving relative URLs--it's usually just the same as the URL that you requested.)</p><p>That program then emits nicely absolute URLs:</p><pre><code>  http://www.cpan.org/MIRRORING.FROM  http://www.cpan.org/RECENT  http://www.cpan.org/RECENT.html  http://www.cpan.org/authors/00whois.html  http://www.cpan.org/authors/01mailrc.txt.gz  http://www.cpan.org/authors/id/A/AA/AASSAD/CHECKSUMS  ...</code></pre><p>See Chapter 4, "URLs", of <i>Perl&nbsp;&amp;&nbsp;LWP</i> for a longer discussion of URI objects.</p><p>Of course, using a regexp to match hrefs is a bit simplistic, and formore robust programs, you'll probably want to use an HTML-parsing modulelike <code>HTML::LinkExtor</code>, or <code>HTML::TokeParser</code>, or even maybe<code>HTML::TreeBuilder</code>.</p><h3>Other Browser Attributes</h3><p><code>LWP::UserAgent</code> objects have many attributes for controlling how theywork. Here are a few notable ones:</p><ul><li><p><code>$browser->timeout(15)</code>: This sets this browser object to give up on requests that don't answer within 15 seconds.</p></li><li><p><code>$browser->protocols_allowed( [ 'http', 'gopher'] )</code>: This sets this browser object to not speak any protocols other than HTTP and gopher. If it tries accessing any other kind of URL (like an "ftp:" or "mailto:" or "news:" URL), then it won't actually try connecting, but instead will immediately return an error code 500, with a message like "Access to ftp URIs has been disabled".</p></li><li><p><code>use LWP::ConnCache; <br />$browser->conn_cache(LWP::ConnCache->new())</code>: This tells the browser object to try using the HTTP/1.1 "Keep-Alive" feature, which speeds up requests by reusing the same socket connection for multiple requests to the same server.</p></li><li><p><code>$browser->agent( 'SomeName/1.23 (more info here maybe)' )</code>: This changes how the browser object will identify itself in the default "User-Agent" line is its HTTP requests.  By default, it'll send "libwww-perl/<i>versionnumber</i>", like "libwww-perl/5.65".  You can change that to something more descriptive like this:</p><pre><code>  $browser->agent( 'SomeName/3.14 (contact@robotplexus.int)' );</code></pre><p>Or if need be, you can go in disguise, like this:</p><pre><code>  $browser->agent(      'Mozilla/4.0 (compatible; MSIE 5.12; Mac_PowerPC)' );</code></pre></li><li><p><code>push @{ $ua->requests_redirectable }, 'POST'</code>: This tells this browser to obey redirection responses to POST requests (like most modern interactive browsers), even though the HTTP RFC says that should not normally be done.</p></li></ul><p>For more options and information, see <a href="http://search.cpan.org/author/GAAS/libwww-perl/lib/LWP/UserAgent.pm">the full documentation for LWP::UserAgent</a>.</p><h3>Writing Polite Robots</h3><p>If you want to make sure that your LWP-based program respects <i>robots.txt</i> files and doesn't make too many requests too fast, you can use the <code>LWP::RobotUA</code>class instead of the <code>LWP::UserAgent</code> class.</p><p><code>LWP::RobotUA</code> class is just like <code>LWP::UserAgent</code>, and you can use it like so:</p><pre><code>  use LWP::RobotUA;  my $browser = LWP::RobotUA->new(    'YourSuperBot/1.34', 'you@yoursite.com');    # Your bot's name and your email address  my $response = $browser->get($url);</code></pre><p>But <code>HTTP::RobotUA</code> adds these features:</p><ul><li><p>If the <i>robots.txt</i> on <code>$url</code>'s server forbids you from accessing<code>$url</code>, then the <code>$browser</code> object (assuming it's of the class <code>LWP::RobotUA</code>) won't actually request it, but instead will give you back (in <code>$response</code>) a 403 errorwith a message "Forbidden by robots.txt".  That is, if you have this line: </p></li><pre><code>  die "$url -- ", $response->status_line, "\nAborted"   unless $response->is_success;</code></pre><p>then the program would die with an error message like this:</p><pre><code>  http://whatever.site.int/pith/x.html -- 403 Forbidden   by robots.txt  Aborted at whateverprogram.pl line 1234</code></pre><li><p>If this <code>$browser</code> object sees that the last time it talked to<code>$url</code>'s server was too recently, then it will pause (via <code>sleep</code>) toavoid making too many requests too often. How long it will pause for, isby default one minute--but you can control it with the <code>$browser->delay( <em>minutes</em> )</code> attribute.</p></li><p>For example, this code:</p><pre><code>  $browser->delay( 7/60 );</code></pre><p>means that this browser will pause when it needs to avoid talking toany given server more than once every 7 seconds.</p></ul><p>For more options and information, see <a href="http://search.cpan.org/author/GAAS/libwww-perl/lib/LWP/RobotUA.pm">the full documentation forLWP::RobotUA</a>.</p><h3>Using Proxies</h3><p>In some cases, you will want to (or will have to) use proxies foraccessing certain sites or for using certain protocols. This is mostcommonly the case when your LWP program is running (or could be running)on a machine that is behind a firewall.</p><p>To make a browser object use proxies that are defined in the usualenvironment variables (<code>HTTP_PROXY</code>), just call the <code>env_proxy</code> on a user-agent object before you go making any requests on it.Specifically:</p><pre><code>  use LWP::UserAgent;  my $browser = LWP::UserAgent->new;    # And before you go making any requests:  $browser->env_proxy;</code></pre><p>For more information on proxy parameters, see <a href="http://search.cpan.org/author/GAAS/libwww-perl/lib/LWP/UserAgent.pm">the LWP::UserAgentdocumentation</a>, specifically the <code>proxy</code>, <code>env_proxy</code>,and <code>no_proxy</code> methods.</p><h3>HTTP Authentication</h3><p>Many Web sites restrict access to documents by using "HTTPAuthentication". This isn't just any form of "enter your password"restriction, but is a specific mechanism where the HTTP server sends thebrowser an HTTP code that says "That document is part of a protected'realm', and you can access it only if you re-request it and add somespecial authorization headers to your request".</p><p>For example, the Unicode.org administrators stop email-harvesting bots fromharvesting the contents of their mailing list archives by protectingthem with HTTP Authentication, and then publicly stating the usernameand password (at <i>http://www.unicode.org/mail-arch/</i>)--namelyusername "unicode-ml" and password "unicode".</p>  <p>For example, consider this URL, which is part of the protectedarea of the Web site:</p><pre><code>  http://www.unicode.org/mail-arch/unicode-ml/y2002-m08/0067.html</code></pre><p>If you access that with a browser, you'll get a promptlike "Enter username and password for 'Unicode-MailList-Archives' at server'www.unicode.org'", or in a graphical browser, something like this:</p><table border="0" cellpadding="2" cellspacing="2"><tr><td width="475"><img src="/pub/2002/08/20/graphics/burke_auth_snapshot.gif" width="475" height="240" alt="Screenshot of site with Basic Auth required" /></td></tr></table><p>In LWP, if you just request that URL, like this:</p><pre><code>  use LWP 5.64;  my $browser = LWP::UserAgent->new;  my $url =   'http://www.unicode.org/mail-arch/unicode-ml/y2002-m08/0067.html';  my $response = $browser->get($url);  die "Error: ", $response->header('WWW-Authenticate') ||     'Error accessing',    #  ('WWW-Authenticate' is the realm-name)    "\n ", $response->status_line, "\n at $url\n Aborting"   unless $response->is_success;</code></pre><p>Then you'll get this error:</p><pre><code>  Error: Basic realm="Unicode-MailList-Archives"   401 Authorization Required   at http://www.unicode.org/mail-arch/unicode-ml/y2002-m08/0067.html   Aborting at auth1.pl line 9.  [or wherever]</code></pre><p>because the <code>$browser</code> doesn't know any the username and passwordfor that realm ("Unicode-MailList-Archives") at that host("www.unicode.org").  The simplest way to let the browser know about thisis to use the <code>credentials</code> method to let it know about a username andpassword that it can try using for that realm at that host.  The syntax is:</p><pre><code>  $browser->credentials(    'servername:portnumber',    'realm-name',    'username' => 'password'  );</code></pre><p>In most cases, the port number is 80, the default TCP/IP port for HTTP; andyou usually call the <code>credentials</code> method before you make any requests.For example:</p><pre><code>  $browser->credentials(    'reports.mybazouki.com:80',    'web_server_usage_reports',    'plinky' => 'banjo123'  );</code></pre><p>So if we add the following to the program above, right after the <code>$browser = LWP::UserAgent->new;</code> line:</p><pre><code>  $browser->credentials(  # add this to our $browser 's "key ring"    'www.unicode.org:80',    'Unicode-MailList-Archives',    'unicode-ml' => 'unicode'  );</code></pre><p>and then when we run it, the request succeeds, instead of causing the<code>die</code> to be called.</p><h3>Accessing HTTPS URLs</h3><p>When you access an HTTPS URL, it'll work for you just like an HTTP URLwould--if your LWP installation has HTTPS support (via an appropriateSecure Sockets Layer library).  For example:</p><pre><code>  use LWP 5.64;  my $url = 'https://www.paypal.com/';   # Yes, HTTPS!  my $browser = LWP::UserAgent->new;  my $response = $browser->get($url);  die "Error at $url\n ", $response->status_line, "\n Aborting"   unless $response->is_success;  print "Whee, it worked!  I got that ",   $response->content_type, " document!\n";</code></pre><p>If your LWP installation doesn't have HTTPS support set up, then theresponse will be unsuccessful, and you'll get this error message:</p><pre><code>  Error at https://www.paypal.com/   501 Protocol scheme 'https' is not supported   Aborting at paypal.pl line 7.   [or whatever program and line]</code></pre><p>If your LWP installation <i>does</i> have HTTPS support installed, then theresponse should be successful, and you should be able to consult<code>$response</code> just like with any normal HTTP response.</p><p>For information about installing HTTPS support for your LWPinstallation, see the helpful <i>README.SSL</i> file that comes in thelibwww-perl distribution.</p><h3>Getting Large Documents</h3><p>When you're requesting a large (or at least potentially large) document,a problem with the normal way of using the request methods (like <code>$response = $browser->get($url)</code>) is that the response object inmemory will have to hold the whole document--<i>in memory</i>. If theresponse is a 30-megabyte file, this is likely to be quite animposition on this process's memory usage.</p><p>A notable alternative is to have LWP save the content to a file on disk,instead of saving it up in memory.  This is the syntax to use:</p><pre><code>  $response = $ua->get($url,                         ':content_file' => $filespec,                      );</code></pre><p>For example,</p><pre><code>  $response = $ua->get('http://search.cpan.org/',                         ':content_file' => '/tmp/sco.html'                      );</code></pre><p>When you use this <code>:content_file</code> option, the <code>$response</code> will haveall the normal header lines, but <code>$response->content</code> will beempty.</p><p>Note that this ":content_file" option isn't supported under olderversions of LWP, so you should consider adding <code>use LWP 5.66;</code> to checkthe LWP version, if you think your program might run on systems witholder versions.</p><p>If you need to be compatible with older LWP versions, then usethis syntax, which does the same thing:</p><pre><code>  use HTTP::Request::Common;  $response = $ua->request( GET($url), $filespec );</code></pre><h3>Resources</h3><p>Remember, this article is just the most rudimentary introduction to LWP--to learn more about LWP and LWP-related tasks, you really must read from the following: </p><ul><li><p><code><a href="http://search.cpan.org/author/GAAS/libwww-perl/lib/LWP/Simple.pm">LWP::Simple</a></code>: Simple functions for getting, heading, and mirroring URLs.</p></li><li><p><code><a href="http://search.cpan.org/author/GAAS/libwww-perl/lib/LWP.pm">LWP</a></code>: Overview of the libwww-perl modules.</p></li><li><p><code><a href="http://search.cpan.org/author/GAAS/libwww-perl/lib/LWP/UserAgent.pm">LWP::UserAgent</a></code>: The class for objects that represent "virtual browsers."</p></li><li><p><code><a href="http://search.cpan.org/author/GAAS/libwww-perl/lib/HTTP/Response.pm">HTTP::Response</a></code>:The class for objects that represent the response to a LWP response, as in <code>$response = $browser->get(...)</code>.</p></li><li><p><code><a href="http://search.cpan.org/author/GAAS/libwww-perl/lib/HTTP/Message.pm">HTTP::Message</a></code> and <code><a href="http://search.cpan.org/author/GAAS/libwww-perl/lib/HTTP/Headers.pm">HTTP::Headers</a></code>: Classes that provide more methods to <code>HTTP::Response</code>.</p></li><li><p><code><a href="http://search.cpan.org/author/GAAS/URI/URI.pm">URI</a></code>: Class for objects that represent absolute or relative URLs.</p></li><li><p><code><a href="http://search.cpan.org/author/GAAS/URI/URI/Escape.pm">URI::Escape</a></code>: Functions for URL-escaping and URL-unescaping strings(like turning "this & that" to and from "this%20%26%20that").</p></li><li><p><code><a href="http://search.cpan.org/author/GAAS/HTML-Parser/lib/HTML/Entities.pm">HTML::Entities</a></code>: Functions for HTML-escaping and HTML-unescaping strings(like turning "C. & E. Bront&euml;" to and from "C. &amp;amp; E. Bront&amp;euml;").</p></li><li><p><code><a href="http://search.cpan.org/author/GAAS/HTML-Parser/lib/HTML/TokeParser.pm">HTML::TokeParser</a></code> and <code><a href="http://search.cpan.org/author/SBURKE/HTML-Tree/lib/HTML/Tree.pm">HTML::TreeBuilder</a></code>: Classes for parsing HTML.</p></li><li><p><code><a href="http://search.cpan.org/author/GAAS/HTML-Parser/lib/HTML/LinkExtor.pm">HTML::LinkExtor</a></code>: Class for finding links in HTML documents.</p></li><li><p>And last but not least, my book <a href="http://www.oreilly.com/catalog/perllwp/">Perl&nbsp;&amp;&nbsp;LWP</a>.</p></li></ul><hr size="1" noshade="noshade" /><p>Copyright &copy;2002, Sean M. Burke.  You can redistribute this document and/ormodify it, but only under the same terms as Perl itself.</p><hr size="1" noshade="noshade" />
                                    </div>


                                </div>
                                <div class="asset-footer">


                                    <div class="entry-tags">
                                        <h4>Tags<span class="delimiter">:</span></h4>
                                        <ul>
                                            <li><a href="javascript:void(0)" onclick="location.href='http://www.perl.com/mt-search.cgi?IncludeBlogs=2&amp;tag=Library%20for%20WWW%20in%20Perl&amp;limit=20';return false;" rel="tag">Library for WWW in Perl</a><span class="delimiter">,</span></li> <li><a href="javascript:void(0)" onclick="location.href='http://www.perl.com/mt-search.cgi?IncludeBlogs=2&amp;tag=LWP&amp;limit=20';return false;" rel="tag">LWP</a><span class="delimiter">,</span></li> <li><a href="javascript:void(0)" onclick="location.href='http://www.perl.com/mt-search.cgi?IncludeBlogs=2&amp;tag=Perl&amp;limit=20';return false;" rel="tag">Perl</a><span class="delimiter">,</span></li> <li><a href="javascript:void(0)" onclick="location.href='http://www.perl.com/mt-search.cgi?IncludeBlogs=2&amp;tag=Perl%20and%20LWP&amp;limit=20';return false;" rel="tag">Perl and LWP</a></li>
                                        </ul>
                                    </div>

                                </div>
                            </div>


                    
                    


                        </div>
                    </div>


                    <div id="beta">
    <div id="beta-inner">


    
    <div class="widget-what-is-perl widget">
    <div class="widget-content widget-content-what-is-perl">
       Visit the home of the  Perl programming language: <a href="http://www.perl.org/">Perl.org</a
    </div>
</div>
<div class="widget-find-out-more widget-archives widget">
    <div class="widget-content">
        <ul>
            <li><a href="http://www.perl.org/get.html">Download</a></li>
            <li><a href="http://perldoc.perl.org/">Documentation</a></li>
            <li><a href="http://blogs.perl.org/">Perl Bloggers</a></li>
            <li><a href="http://news.perlfoundation.org/">Foundation News</a></li>
        </ul>
    </div>
</div><div class="widget-tcpc widget">
<h3 class="widget-header">Sponsored by</h3>
    <div class="widget-content">
        <a href="http://training.perl.com/" alt="Perl Training" target="_blank"><img src="/i/tcpc.png" width="150" height="50"></a>
    </div>
</div>

<div class="widget-syndication widget">
    <div class="widget-content">
        <ul>
            <li><img src="http://www.perl.com/mt-static/images/status_icons/feed.gif" alt="Subscribe to feed" width="9" height="9" /> <a href="http://www.perl.com/pub/atom.xml">Subscribe to this website's feed</a></li>

        </ul>
    </div>
</div>
<div class="widget-archive-monthly widget-archive widget">
    <h3 class="widget-header">Monthly <a href="http://www.perl.com/pub/archives.html">Archives</a></h3>
    <div class="widget-content">
        <ul>
        
            <li><a href="http://www.perl.com/pub/2014/02/">February 2014 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2014/01/">January 2014 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2013/10/">October 2013 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2013/01/">January 2013 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2012/12/">December 2012 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2012/11/">November 2012 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2012/10/">October 2012 (2)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2012/08/">August 2012 (2)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2012/06/">June 2012 (11)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2012/05/">May 2012 (18)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2012/04/">April 2012 (17)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2012/02/">February 2012 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2011/12/">December 2011 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2011/09/">September 2011 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2011/08/">August 2011 (2)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2011/06/">June 2011 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2011/05/">May 2011 (3)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2011/04/">April 2011 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2011/03/">March 2011 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2011/02/">February 2011 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2011/01/">January 2011 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2010/11/">November 2010 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2010/10/">October 2010 (2)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2010/09/">September 2010 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2010/08/">August 2010 (3)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2010/07/">July 2010 (2)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2010/04/">April 2010 (2)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2010/03/">March 2010 (4)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2008/05/">May 2008 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2008/04/">April 2008 (2)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2008/03/">March 2008 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2008/02/">February 2008 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2008/01/">January 2008 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2007/12/">December 2007 (2)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2007/09/">September 2007 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2007/08/">August 2007 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2007/07/">July 2007 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2007/06/">June 2007 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2007/05/">May 2007 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2007/04/">April 2007 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2007/03/">March 2007 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2007/02/">February 2007 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2007/01/">January 2007 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2006/12/">December 2006 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2006/11/">November 2006 (2)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2006/10/">October 2006 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2006/09/">September 2006 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2006/08/">August 2006 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2006/07/">July 2006 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2006/06/">June 2006 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2006/05/">May 2006 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2006/04/">April 2006 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2006/03/">March 2006 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2006/02/">February 2006 (4)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2006/01/">January 2006 (4)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2005/12/">December 2005 (4)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2005/11/">November 2005 (3)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2005/10/">October 2005 (2)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2005/09/">September 2005 (2)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2005/08/">August 2005 (9)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2005/07/">July 2005 (8)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2005/06/">June 2005 (9)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2005/05/">May 2005 (8)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2005/04/">April 2005 (7)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2005/03/">March 2005 (6)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2005/02/">February 2005 (7)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2005/01/">January 2005 (6)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2004/12/">December 2004 (8)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2004/11/">November 2004 (8)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2004/10/">October 2004 (5)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2004/09/">September 2004 (9)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2004/08/">August 2004 (6)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2004/07/">July 2004 (8)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2004/06/">June 2004 (6)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2004/05/">May 2004 (7)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2004/04/">April 2004 (8)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2004/03/">March 2004 (8)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2004/02/">February 2004 (9)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2004/01/">January 2004 (7)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2003/12/">December 2003 (4)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2003/11/">November 2003 (7)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2003/10/">October 2003 (8)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2003/09/">September 2003 (6)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2003/08/">August 2003 (7)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2003/07/">July 2003 (9)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2003/06/">June 2003 (9)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2003/05/">May 2003 (8)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2003/04/">April 2003 (8)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2003/03/">March 2003 (10)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2003/02/">February 2003 (8)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2003/01/">January 2003 (8)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2002/12/">December 2002 (5)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2002/11/">November 2002 (9)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2002/10/">October 2002 (7)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2002/09/">September 2002 (11)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2002/08/">August 2002 (8)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2002/07/">July 2002 (8)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2002/06/">June 2002 (4)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2002/05/">May 2002 (6)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2002/04/">April 2002 (6)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2002/03/">March 2002 (7)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2002/02/">February 2002 (5)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2002/01/">January 2002 (8)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2001/12/">December 2001 (7)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2001/11/">November 2001 (5)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2001/10/">October 2001 (9)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2001/09/">September 2001 (7)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2001/08/">August 2001 (13)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2001/07/">July 2001 (8)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2001/06/">June 2001 (13)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2001/05/">May 2001 (11)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2001/04/">April 2001 (9)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2001/03/">March 2001 (8)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2001/02/">February 2001 (8)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2001/01/">January 2001 (8)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2000/12/">December 2000 (6)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2000/11/">November 2000 (10)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2000/10/">October 2000 (10)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2000/09/">September 2000 (2)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2000/08/">August 2000 (2)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2000/07/">July 2000 (5)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2000/06/">June 2000 (7)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2000/05/">May 2000 (7)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2000/04/">April 2000 (3)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2000/03/">March 2000 (2)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2000/02/">February 2000 (2)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/2000/01/">January 2000 (2)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/1999/12/">December 1999 (6)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/1999/11/">November 1999 (6)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/1999/10/">October 1999 (5)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/1999/09/">September 1999 (4)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/1999/08/">August 1999 (3)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/1999/07/">July 1999 (2)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/1999/06/">June 1999 (3)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/1999/04/">April 1999 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/1999/03/">March 1999 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/1999/01/">January 1999 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/1998/12/">December 1998 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/1998/11/">November 1998 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/1998/07/">July 1998 (2)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/1998/06/">June 1998 (1)</a></li>
        
    
        
            <li><a href="http://www.perl.com/pub/1998/03/">March 1998 (1)</a></li>
        
        </ul>
    </div>
</div>
        
    

<div class="widget-powered widget">
    <div class="widget-content">
        <a href="http://www.movabletype.com/"><img src="http://www.perl.com/mt-static/images/bug-pbmt-white.png" alt="Powered by Movable Type 5.13-en" width="120" height="75" /></a>
    </div>
</div>



    </div>
</div>






                </div>
            </div>


            <div id="footer">
    <div id="footer-inner">
        <div id="footer-content">
            <div class="widget-powered widget">
                <div class="widget-content">
                    Powered by <a href="http://www.movabletype.com/" rel="generator">Movable Type Pro</a>
                </div>
            </div>

            <div class="widget-creative-commons widget">
                <div class="widget-content">
                    This blog is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/">Creative Commons License</a>.
                </div>
            </div>

        </div>
    </div>
</div>



        </div>
    </div>
</body>
</html>
